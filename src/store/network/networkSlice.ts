import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';

export interface NetworkState {
  value: [] | any;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: NetworkState = {
  value:[
    {
        name: "Ethereum",
        icon: require("../../images/ethereum.png"),
        chainId: 1,
        isActive: false,
        rpcUrl: '',
        Currency: "ETH"
    },
    {
        name: "Mumbai Testnet",
        icon: require("../../images/polygon.png"),
        chainId: 80001,
        isActive: false,
        Currency: 'MATIC',
        rpcUrl: 'https://rpc-mumbai.matic.today'
    },
    {
        name: "Goerli Testnet",
        icon: require("../../images/ethereum.png"),
        chainId: 5,
        isActive: true,
        Currency: 'RETH',
        rpcUrl: ''
    },
    {
        icon: require("../../images/binance.png"),
        name: "Smart Chain Testnet",
        chainId: 97,
        isActive: false,
        Currency: 'tBNB',
        rpcUrl: 'https://data-seed-prebsc-1-s3.binance.org:8545'
    }
],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const networkSlice = createSlice({
  name: 'network',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    changeSelectedNetwork: (state, action: PayloadAction<any>) => {
      const {id} = action.payload;
      state.value = state.value.map((network: any) => {
        if (network.id === id) {
          return {
            ...network,
            isActive: true,
          };
        } else {
          return {
            ...network,
            isActive: false,
          };
        }
      });
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(changeSelectedNetwork.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       })
//       .addCase(incrementAsync.rejected, (state) => {
//         state.status = 'failed';
//       });
//   },
});

export const { changeSelectedNetwork } = networkSlice.actions;
export const currentNetwork = (state: RootState) => state.network.value.filter((network: any) => network.isActive)[0];
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNetwork = (state: RootState) => state.network.value;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default networkSlice.reducer;
